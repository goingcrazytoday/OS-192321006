3. Dining Philosophers Problem
Program:
#include &lt;pthread.h&gt;
#include &lt;semaphore.h&gt;
#include &lt;stdio.h&gt;
#define N 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (phnum + 4) % N
#define RIGHT (phnum + 1) % N
int state[N];
int phil[N] = {0, 1, 2, 3, 4};
sem_t mutex;
sem_t S[N];
void test(int phnum) {
if (state[phnum] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] !=
EATING) {
state[phnum] = EATING;
printf(&quot;Philosopher %d takes fork %d and %d\n&quot;, phnum + 1, LEFT + 1,
phnum + 1);
printf(&quot;Philosopher %d is Eating\n&quot;, phnum + 1);
sem_post(&amp;S[phnum]);
}
}

void take_fork(int phnum) {
sem_wait(&amp;mutex);
state[phnum] = HUNGRY;
printf(&quot;Philosopher %d is Hungry\n&quot;, phnum + 1);
test(phnum);
sem_post(&amp;mutex);
sem_wait(&amp;S[phnum]);
}
void put_fork(int phnum) {
sem_wait(&amp;mutex);
state[phnum] = THINKING;
printf(&quot;Philosopher %d putting fork %d and %d down\n&quot;, phnum + 1, LEFT +
1, phnum + 1);
printf(&quot;Philosopher %d is thinking\n&quot;, phnum + 1);
test(LEFT);
test(RIGHT);
sem_post(&amp;mutex);
}
void* philosopher(void* num) {
while (1) {
int* i = num;
sleep(1);
take_fork(*i);
sleep(0);
put_fork(*i);
}
}
int main() {
int i;
pthread_t thread_id[N];
sem_init(&amp;mutex, 0, 1);
for (i = 0; i &lt; N; i++)
sem_init(&amp;S[i], 0, 0);
for (i = 0; i &lt; N; i++) {
pthread_create(&amp;thread_id[i], NULL, philosopher, &amp;phil[i]);
printf(&quot;Philosopher %d is thinking\n&quot;, i + 1);
}
for (i = 0; i &lt; N; i++)
pthread_join(thread_id[i], NULL);
}
Input:
No user input required.
Output:
Philosopher 1 is thinking
Philosopher 2 is thinking
Philosopher 3 is thinking
Philosopher 4 is thinking

Philosopher 5 is thinking
Philosopher 0
