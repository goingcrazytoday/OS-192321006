1. Round Robin Scheduling
Program:
#include &lt;stdio.h&gt;
void findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum)
{
int rem_bt[n];
for (int i = 0; i &lt; n; i++)
rem_bt[i] = bt[i];
int t = 0;
while (1) {
int done = 1;
for (int i = 0; i &lt; n; i++) {
if (rem_bt[i] &gt; 0) {
done = 0;
if (rem_bt[i] &gt; quantum) {
t += quantum;
rem_bt[i] -= quantum;
} else {
t += rem_bt[i];
wt[i] = t - bt[i];
rem_bt[i] = 0;
}
}
}
if (done == 1)
break;
}
}
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int
tat[]) {
for (int i = 0; i &lt; n; i++)
tat[i] = bt[i] + wt[i];
}
void findAvgTime(int processes[], int n, int bt[], int quantum) {
int wt[n], tat[n], total_wt = 0, total_tat = 0;
findWaitingTime(processes, n, bt, wt, quantum);
findTurnAroundTime(processes, n, bt, wt, tat);
printf(&quot;Processes\tBurst Time\tWaiting Time\tTurn-Around Time\n&quot;);
for (int i = 0; i &lt; n; i++) {
total_wt += wt[i];
total_tat += tat[i];
printf(&quot;%d\t\t%d\t\t%d\t\t%d\n&quot;, processes[i], bt[i], wt[i], tat[i]);
}
printf(&quot;Average waiting time = %.2f\n&quot;, (float)total_wt / n);
printf(&quot;Average turn-around time = %.2f\n&quot;, (float)total_tat / n);

}
int main() {
int processes[] = {1, 2, 3};
int n = sizeof(processes) / sizeof(processes[0]);
int burst_time[] = {10, 5, 8};
int quantum = 2;
findAvgTime(processes, n, burst_time, quantum);
return 0;
}
Input:
 Processes: P1, P2, P3
 Burst Times: 10, 5, 8
 Time Quantum: 2
Output:
Processes Burst Time Waiting Time Turn-Around Time
1 10 13 23
2 5 8 13
3 8 12 20
Average waiting time = 11.00
Average turn-around time = 18.67

