3. Least Recently Used (LRU) Paging in C
A C program to simulate LRU page replacement.
Code:
#include &lt;stdio.h&gt;
int search(int key, int frame[], int frames) {
for (int i = 0; i &lt; frames; i++)
if (frame[i] == key)
return i;
return -1;
}
void LRUPageReplacement(int pages[], int n, int frames) {
int frame[frames], counter[frames], time = 0, page_faults = 0;
for (int i = 0; i &lt; frames; i++) {
frame[i] = -1; // Initialize with -1
counter[i] = 0;
}
for (int i = 0; i &lt; n; i++) {
int idx = search(pages[i], frame, frames);
if (idx == -1) { // Page fault
int min = 0;
for (int j = 1; j &lt; frames; j++) {
if (counter[j] &lt; counter[min])
min = j;
}
frame[min] = pages[i];
counter[min] = time;
page_faults++;
} else {
counter[idx] = time;
}
time++;
printf(&quot;Step %d: &quot;, i + 1);
for (int j = 0; j &lt; frames; j++) {
if (frame[j] != -1)
printf(&quot;%d &quot;, frame[j]);
else
printf(&quot;- &quot;);

}
printf(&quot;\n&quot;);
}
printf(&quot;Total Page Faults: %d\n&quot;, page_faults);
}
int main() {
int pages[] = {1, 3, 0, 3, 5, 6, 3};
int n = sizeof(pages) / sizeof(pages[0]);
int frames = 3;
LRUPageReplacement(pages, n, frames);
return 0;
}
